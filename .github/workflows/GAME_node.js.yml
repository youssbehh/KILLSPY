# This workflow will do a clean installation of node dependencies, cache/restore them,
# build the source code, and run tests across different versions of Node.js.
# For more information, see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Game CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [22.x]

    steps:
    - name: ------------ RECUPERATION DU CODE DU REPO ------------
      uses: actions/checkout@v4

    - name: ------------ SET UP NODE JS SUR LA VERSION 22.x ------------
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: game/package-lock.json

    - name: ------------ VERIFICATION ARBORESCENCE DU REPO ------------
      run: ls -R

    - name: ------------ INSTALLATION DES DEPENDANCES (GAME) ------------
      run: npm ci
      working-directory: game

    - name: ------------ CONSTRUCTION DU PROJET (SI NECESSAIRE) ------------
      run: npm run build --if-present
      working-directory: game

    - name: ------------ DEMARRAGE DU SERVEUR EXPO ------------
      run: npm start &
      working-directory: game

    - name: ------------ EXECUTION DES TESTS JEST (GAME) ------------
      run: npm test
      working-directory: game

    - name: ------------ ARRÊTER LE SERVEUR EXPO ------------
      run: pkill -f "node"
      working-directory: game

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: ------------ RECUPERATION DU CODE DU REPO ------------
      uses: actions/checkout@v4

    - name: ------------ CONNEXION À DOCKER HUB ------------
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: ------------ PULL DE L'IMAGE EXISTANTE (SI DISPONIBLE) ------------
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/game-app:latest || true

    - name: ------------ CONSTRUCTION DE L'IMAGE DOCKER AVEC CACHE ------------
      run: |
        docker build --cache-from=${{ secrets.DOCKER_USERNAME }}/game-app:latest \
                     --tag ${{ secrets.DOCKER_USERNAME }}/game-app:latest \
                     --tag ${{ secrets.DOCKER_USERNAME }}/game-app:${{ github.sha }} \
                     .
      working-directory: game

    - name: ------------ PUSH DE L'IMAGE DOCKER (LATEST & SHA) ------------
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/game-app:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/game-app:${{ github.sha }}

